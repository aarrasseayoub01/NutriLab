import Head from "next/head";
import { useEffect, useState } from "react";
import axios from "axios";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import HowItsBuilt from "../components/HowItsBuilt";
import DietInfo from "../components/DietInfo";
import DailyNutrients from "../components/DailyNutrients";

import { User_data } from "../context/context";
import { useContext } from "react";
import calculateNutrients from "../components/Calculate/CalculateNutrients";
import calculateVitamins from "../components/Calculate/CalculateVitamins";

export default function Nutrients() {
  const [isInfosApplied, setIsInfosApplied] = useState(false);
  const [nutrients, setNutrients] = useState();
  const [vitamins, setVitamins] = useState();
  const { user, setUser } = useContext(User_data);

  // Next is SSR so we should ... , Force a render with useEffect
  const [localInfos, setLocalInfos] = useState({
      age: "",
      sex: "",
      height: "",
      weight: "",
      activity: "",
      plan: ""
  });
  const [localNutris, setLocalNutris] = useState({
      kCalories: 0,
      proteins: 0,
      carbs: 0,
      fats: 0,
      fiber: 0,
      salt: 0,
      iron: 0,
      sugar: 0
  });

  useEffect(() => {
    // Fetch Data from the server if the user is authenticated
    const fetchNutriInfo = async () => {
      await axios.get("/api/nutriInfo").then((res) => {
        setLocalInfos(res.data);
      });
    }

    const fetchNutrients = async () => {
      await axios.get("/api/nutri").then((res) => {
        setLocalNutris(res.data);
      });
    }

    // Check if the user is authenticated or is a guest
    const dietInfos = JSON.parse(window.localStorage.getItem("dietInfos"));
    const nutris = JSON.parse(window.localStorage.getItem("nutris"));
    if (!user) {
      setLocalInfos(dietInfos);
      setLocalNutris(nutris);
    } else {
      fetchNutriInfo();
      fetchNutrients();
    }

    if (dietInfos) {
      setIsInfosApplied(true);
    }
  }, [user]);

  console.log(user)

  const applyInfos = async (dietInfos) => { 
    const { age, sex, height, weight, activity, plan } = dietInfos;
    user &&
      (await axios.put("/api/nutriInfo", dietInfos, {
        headers: {
          "Content-Type": "application/json",
        },
      }));
    const nutris = calculateNutrients(age, sex, height, weight, activity, plan);
    //Calculate Nutrients
    setNutrients(nutris);
    localStorage.setItem("nutris", JSON.stringify(nutris));
    user && (await axios.put("/api/nutri", nutris));
    //Calculate Vitamins
    setVitamins(calculateVitamins(age, sex, height, weight, activity, plan));
    setIsInfosApplied(true);
  };

  return (
    <div>
      <Head>
        <title>NutriLab - Nutrients</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://i.ibb.co/yhHmPr0/orange-slice.png" />
      </Head>

      {/* Nutrients Page  */}
      <Navbar User={user} />

      <div className="grid grid-cols-6 justify-items-center">
        <div className="flex flex-col justify-center items-center | sm:col-start-2 xl:col-start-3 col-span-6 sm:col-span-4 xl:col-span-2 | max-w-xl mx-4">
          <h1 className="font-title text-6xl text-center | w-full my-16">
            Let us know You
          </h1>
          <DietInfo
            handleApply={applyInfos}
            flushInfos={() => setIsInfosApplied(false)}
            isInfosApplied={isInfosApplied}
            localInfos={localInfos}
          />
        </div>
      </div>

      <div className="grid grid-cols-8">
        {localNutris && isInfosApplied ? (
          <DailyNutrients
            nutrients={nutrients || localNutris}
            vitamins={vitamins}
          />
        ) : (
          isInfosApplied && (
            <DailyNutrients nutrients={nutrients} vitamins={vitamins} />
          )
        )}
      </div>

      <HowItsBuilt />

      <Footer />
    </div>
  );
}
