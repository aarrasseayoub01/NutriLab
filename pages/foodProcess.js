import Head from "next/head";
import { useContext, useEffect, useState } from "react";

import Navbar from "/components/Navbar";
import axios from "axios";
import { User_data } from "/context/context";
import AddDailyFood from "../components/AddDailyFood";
import YourInfo from "../components/YourInfo";

const Food = ({ food }) => {
  const [eatenFoodList, setEatenFoodList] = useState([]);
  const [isAlgorithmEnabled, setIsAlgorithmEnabled] = useState(false);

  const { user, setUser } = useContext(User_data);

  // Next is SSR, so we should ... , Force a render with useEffect

  const [localNutris, setLocalNutris] = useState({});
  const [localInfos, setLocalInfos] = useState({});
  useEffect(() => {
    setLocalNutris(JSON.parse(window.localStorage.getItem("nutris")));
    setLocalInfos(JSON.parse(window.localStorage.getItem("dietInfos")));
  }, []);

  //Handle API changes
  const [algoData, setAlgoData] = useState({});

  const laboTable1 = eatenFoodList.map((food) => {
    return (
      <tr
        key={food.name}
        className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
      >
        <th
          scope="row"
          className="px-6 py-4 font-bold text-gray-900 whitespace-nowrap dark:text-white truncate hover:whitespace-normal sm:whitespace-normal"
        >
          {food.name}
        </th>
        <td className="px-3 py-4 underline font-black text-lg truncate whitespace-normal">
          {food.size}g
        </td>
      </tr>
    );
  });

  const laboTable2 =
    Object.keys(algoData).length !== 0 &&
    Object.keys(algoData).map((food) => {
      return (
        <tr
          key={food.name}
          className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
        >
          <th
            scope="row"
            className="px-6 py-4 font-bold text-gray-900 dark:text-white truncate whitespace-normal sm:whitespace-normal"
          >
            {food.slice(1).split("_").join(" ")}
          </th>
          <td className="px-3 py-4 underline font-black text-lg truncate whitespace-nowrap">
            {/* {100 * algoData[food]} g */}
            {(Math.round(100 * algoData[food] * 100) / 100).toFixed(2)}g
          </td>
        </tr>
      );
    });
  // const laboTable3 = treatedFoodList.map((food) => {
  const laboTable3 =
    Object.keys(algoData).length !== 0 &&
    Object.keys(algoData).map((food) => {
      return (
        <tr
          key={food.name}
          className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
        >
          <th
            scope="row"
            className="text-green-500 px-6 py-4 font-bold  whitespace-nowrap dark:text-white truncate hover:whitespace-normal sm:whitespace-normal"
          >
            {food.slice(1).split("_").join(" ")}
          </th>
          <td className="px-3 py-4 underline font-black text-lg truncate whitespace-normal text-green-500">
            +{(Math.round(100 * algoData[food] * 100) / 100).toFixed(2)}g
          </td>
        </tr>
      );
    });

  // ---------------------------------------------------------------------------------------------------------------

  return (
    <div>
      <Head>
        <title>NutriLab - Food</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://i.ibb.co/yhHmPr0/orange-slice.png" />
      </Head>

      <Navbar User={user} />
      <AddDailyFood
        food={food}
        eatenFoodList={eatenFoodList}
        setEatenFoodList={setEatenFoodList}
        setAlgoData={setAlgoData}
        setIsAlgorithmEnabled={setIsAlgorithmEnabled}
      />
      <YourInfo localInfos={localInfos} localNutris={localNutris} />
      {/* Food Algorithm  */}
      {isAlgorithmEnabled && (
        <div
          id="algorithm"
          className="
                        flex flex-col justify-center items-center
                        sm:col-start-2 col-span-8 sm:col-span-6
                        border-2 border-custom-orange rounded
                        w-full mb-16"
        >
          <h3 className="font-title text-3xl xs:text-4xl sm:text-5xl text-center | w-full my-16">
            Your Labo
          </h3>
          <div className="flex items-stretch justify-between w-full mb-4">
            <div className="flex-1 border-2 border-custom-orange flex flex-col justify-start items-center w-full mx-2">
              <p className="font-paragraph font-bold text-xl text-black my-4">
                Previous Diet
              </p>

              <div className="border-b-2 border-custom-orange w-full"></div>

              <table className="w-full text-sm text-left text-black dark:text-white font-logo">
                <tbody>{laboTable1}</tbody>
              </table>
            </div>

            <div
              className="
                          border-2 border-custom-orange 
                          flex-1 flex flex-col justify-start items-center 
                          w-full mx-2
                          
            "
            >
              <div className="bg-gradient-to-r from-gradient1 to-gradient2 w-full text-center">
                <p className="font-paragraph font-bold text-xl text-white my-4">
                  Changes Made
                </p>
              </div>

              <div className="border-b-2 border-custom-orange w-full"></div>

              <table className="w-full text-sm text-left text-black dark:text-white font-logo">
                <tbody>{laboTable2}</tbody>
              </table>
            </div>

            <div
              className="
                          border-2 border-custom-orange 
                          flex-1 flex flex-col justify-start items-center 
                          w-full mx-2
                          
            "
            >
              <div className="bg-gradient-to-r from-gradient1 to-gradient2 w-full text-center">
                <p className="font-paragraph font-bold text-xl text-white my-4">
                  New Diet
                </p>
              </div>

              <div className="border-b-2 border-custom-orange w-full"></div>

              <table className="w-full text-sm text-left text-black dark:text-white font-logo">
                <tbody>{laboTable1}</tbody>
                <tbody>{laboTable3}</tbody>
              </table>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Food;

export const getStaticProps = async () => {
  const url =
    process.env.VERCEL_ENV === "production"
      ? "https://nutrilab.vercel.app/api/food"
      : "http://localhost:3000/api/food";
  const res = await axios.get(url);
  const food = await res.data;

  return {
    props: {
      food,
    },
  };
};
