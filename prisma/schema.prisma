generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  age           String?
  height        String?
  plan          String?
  weight        String?
  sex           String?
  activity      String?
  Nutrients     Nutrients?
  NutriInfo     NutriInfo?
  FoodHistory   FoodList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model User {
//   id        Int        @id @default(autoincrement())
//   name      String
//   email     String     @unique
//   password  String
//   age       String?
//   height    String?
//   weight    String?
//   sex       String?
//   activity  String?
//   Nutrients Nutrients?
//   NutriInfo NutriInfo?
// }

model NutriInfo {
  id Int @id @default(autoincrement())

  age      String?
  height   String?
  weight   String?
  sex      String?
  activity String?
  plan     String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
}

model Nutrients {
  id        Int    @id @default(autoincrement())
  kCalories Int?
  proteins  Int?
  carbs     Int?
  fats      Int?
  salt      Int?
  sugar     Int?
  iron      Int?
  fiber     Int?
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique
}

model Food {
  id         Int       @id @default(autoincrement())
  name       String
  size       Float
  FoodList   FoodList? @relation(fields: [foodListId], references: [id])
  foodListId Int?
}

model FoodList {

  id       Int      @id @default(autoincrement())
  food     Food[]
  User     User?    @relation(fields: [userId], references: [id])
  lable    String?
  date     DateTime @default(now()) @db.Date
  userId   String
  Calories Float
  Carbs    Float
  Fat      Float
  Fiber    Float
  Protein  Float
  Salt     Float
  Sugar    Float
}
