import Head from "next/head";
import { useRouter } from "next/router";
import { BsGoogle, BsFacebook, BsTwitter } from "react-icons/bs";
import { useState } from "react";
import axios from "axios";

export default function Register({ setLogin, setAuth, setOpen }) {
  const [user, setUser] = useState({
    name: "",
    email: "",
    password: "",
    rePass: "",
  });
  const [error, setError] = useState({
    name: "",
    email: "",
    pass: "",
    rePass: "",
  });

  const router = useRouter();
  const handleSubmit = async (e) => {
    e.preventDefault();
    user.password === "" && setError({ rePass: "Enter an Password" });
    user.email === "" && setError({ email: "Enter an Email" });
    user.name === "" && setError({ name: "Enter a name" });
    if (user.name !== "" && user.email !== "" && user.password !== "") {
      if (user.password === user.rePass) {
        const data = {
          name: user.name,
          email: user.email,
          password: user.password,
        };
        await axios
          .post("/api/register", data, {
            headers: {
              "Content-Type": "application/json",
            },
          })
          .then(async (response) => {
            setAuth(response.data);
            setOpen(false);
            await axios.get("/api/nutriInfo").then((res) => {
              const localData = {
                ...res.data,
                age: "",
                sex: "",
                weight: "",
                height: "",
                activity: "",
                plan: "",
              };
              localStorage.setItem("dietInfos", JSON.stringify(localData));
            });
            setUser(response.data);
          })
          .catch((error) => {
            setError({ email: "This email already exists" });
          });
      } else {
        setError({ rePass: "Make sure to repeat the password correctly" });
      }
    }
  };

  return (
    <>
      <Head>
        <title>NutriLab - Register</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://i.ibb.co/yhHmPr0/orange-slice.png" />
      </Head>
      <div>
        <div className="bg-white px-8 py-6 text-left shadow-lg">
          <div className="flex justify-around">
            <button
              className="transition duration-300 ease-out hover:scale-125"
              onClick={() => signIn("google")}
            >
              <BsGoogle className="h-12 w-12 fill-orange-400 hover:fill-orange-600" />
            </button>
            <button
              className="transition duration-300 ease-out hover:scale-125"
              onClick={() => signIn("facebook")}
            >
              <BsFacebook className="h-12 w-12 fill-orange-400 hover:fill-orange-600" />
            </button>
            <button className="transition duration-300 ease-out hover:scale-125">
              <BsTwitter className="h-12 w-12 fill-orange-400 hover:fill-orange-600" />
            </button>
          </div>
          <div className="mt-7 mb-3 h-1 w-full bg-orange-400"></div>
          <h3 className="text-center text-2xl font-bold">Join us</h3>
          <form action="">
            <div className="mt-4">
              <div className="relative flex flex-row">
                <div className=" flex basis-1/4 items-center">
                  <label className="text-center" htmlFor="Name">
                    Name
                  </label>
                </div>
                <input
                  type="text"
                  onFocus={() =>
                    setError({
                      name: "",
                      email: "",
                      pass: "",
                      rePass: "",
                    })
                  }
                  value={user.name}
                  onChange={(e) => setUser({ ...user, name: e.target.value })}
                  placeholder="Name"
                  className={
                    "mt-2 w-max basis-3/4 rounded-md border px-4 py-2 focus:outline-none focus:ring-1 focus:ring-blue-600" +
                    (error.name && "border-3 border-rose-500")
                  }
                />
                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {error.name}
                </p>
              </div>
              <div className="relative mt-4 flex flex-row">
                <div className=" flex basis-1/4 items-center">
                  <label className=" text-center" htmlFor="Email">
                    Email
                  </label>
                </div>
                <input
                  type="text"
                  onFocus={() =>
                    setError({
                      name: "",
                      email: "",
                      pass: "",
                      rePass: "",
                    })
                  }
                  value={user.email}
                  onChange={(e) => setUser({ ...user, email: e.target.value })}
                  placeholder="Email"
                  className={
                    "mt-2 w-full basis-3/4 rounded-md border px-4 py-2 focus:outline-none focus:ring-1 focus:ring-blue-600" +
                    (error.email && "border-3 border-rose-500")
                  }
                />
                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {error.email}
                </p>
              </div>

              <div className="relative mt-4 flex flex-row">
                <div className=" flex basis-1/4 items-center">
                  <label className=" text-center">Password</label>
                </div>
                <input
                  onFocus={() =>
                    setError({
                      name: "",
                      email: "",
                      pass: "",
                      rePass: "",
                    })
                  }
                  type="password"
                  onChange={(e) =>
                    setUser({ ...user, password: e.target.value })
                  }
                  placeholder="Password"
                  className={
                    " mt-2 w-full basis-3/4 rounded-md border px-4 py-2 hover:ring-blue-600 focus:outline-none focus:ring-1" +
                    (error.rePass && "border-3 border-rose-500")
                  }
                />

                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {error.rePass}
                </p>
              </div>
              <div className="mt-4 flex flex-row">
                <div className=" basis-1/4">
                  <label className=" text-center">Confirm Password</label>
                </div>
                <input
                  type="password"
                  onChange={(e) => setUser({ ...user, rePass: e.target.value })}
                  placeholder="Password"
                  className="mt-2 w-full basis-3/4 rounded-md border px-4 py-2 focus:outline-none focus:ring-1 focus:ring-blue-600"
                />
              </div>
              {/* <span className="text-xs text-red-400">
                Password must be same!
              </span> */}
              <div className="flex">
                <button
                  onClick={handleSubmit}
                  className="mt-4 w-full rounded-lg bg-orange-400 px-6 py-2 text-white hover:bg-orange-600"
                >
                  Create Account
                </button>
              </div>
              <div className="text-grey-dark mt-6">
                Already have an account?
                <button
                  className="text-orange-600 hover:underline"
                  onClick={() => setLogin(true)}
                >
                  Log in
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </>
  );
}
