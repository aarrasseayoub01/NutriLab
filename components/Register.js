import Head from "next/head";
import { useRouter } from "next/router";
import { BsGoogle, BsFacebook, BsTwitter } from "react-icons/bs";
import { useState } from "react";
import axios from "axios";
import { useFormik } from "formik";

export default function Register({ setLogin, setAuth, setOpen }) {
  const validate = (values) => {
    const errors = {};

    if (!values.name) {
      errors.name = "Required";
    } else if (values.name.length < 3 || values.name.length > 25) {
      errors.name = "Must be between 3 and 25 characters";
    }

    if (!values.email) {
      errors.email = "Required";
    } else if (
      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)
    ) {
      errors.email = "Invalid email address";
    }

    if (!values.password) {
      errors.password = "Required";
    } else if (values.password.length < 6 || values.password.length > 25) {
      errors.password = "Must be between 6 and 25 characters";
    }

    if (!values.repassword) {
      errors.repassword = "Required";
    } else if (values.repassword !== values.password) {
      errors.repassword = "Password do not match";
    }

    return errors;
  };

  const formik = useFormik({
    initialValues: {
      name: "",
      email: "",
      password: "",
      repassword: "",
    },
    validate,
    onSubmit: (values) => {
      handleSubmit(values);
    },
  });

  const [error, setError] = useState({
    email: ""
  });

  const router = useRouter();
  const handleSubmit = async (values) => {
    const data = {
      name: values.name,
      email: values.email,
      password: values.password,
    };
    await axios
      .post("/api/register", data, {
        headers: {
          "Content-Type": "application/json",
        },
      })
      .then(async (response) => {
        setAuth(response.data);
        setOpen(false);

        if (router.query.path) {
          router.push(router.query.path);
        }
      })
      .catch((error) => {
        setError({ email: "This email already exists" });
      });
  };

  return (
    <>
      <Head>
        <title>NutriLab - Register</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://i.ibb.co/yhHmPr0/orange-slice.png" />
      </Head>
      <div>
        <div className="bg-white px-8 py-6 text-left shadow-lg">
          <div className="flex justify-around">
            <button
              className="transition duration-300 ease-out hover:scale-125"
              onClick={() => signIn("google")}
            >
              <BsGoogle className="h-12 w-12 fill-orange-400 hover:fill-orange-600" />
            </button>
            <button
              className="transition duration-300 ease-out hover:scale-125"
              onClick={() => signIn("facebook")}
            >
              <BsFacebook className="h-12 w-12 fill-orange-400 hover:fill-orange-600" />
            </button>
            <button className="transition duration-300 ease-out hover:scale-125">
              <BsTwitter className="h-12 w-12 fill-orange-400 hover:fill-orange-600" />
            </button>
          </div>
          <div className="mt-7 mb-3 h-1 w-full bg-orange-400"></div>
          <h3 className="text-center text-2xl font-bold">Join us</h3>
          <form action="">
            <div className="mt-4">
              <div className="relative flex flex-row">
                <div className=" flex basis-1/4 items-center">
                  <label className="text-center" htmlFor="Name">
                    Name
                  </label>
                </div>
                <input
                  type="text"
                  name="name"
                  {...formik.getFieldProps("name")}
                  placeholder="Name"
                  className={
                    "mt-2 w-max basis-3/4 rounded-md border px-4 py-2 focus:outline-none  " +
                    (formik.errors.name &&
                      formik.touched.name &&
                      "border-red-600 focus:border-red-600")
                  }
                />
                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {formik.touched.name && formik.errors.name}
                </p>
              </div>
              <div className="relative mt-4 flex flex-row">
                <div className=" flex basis-1/4 items-center">
                  <label className=" text-center" htmlFor="Email">
                    Email
                  </label>
                </div>
                <input
                  type="text"
                  onFocus={() =>
                    setError({
                      ...error,
                      email: "",
                    })
                  }
                  name="email"
                  {...formik.getFieldProps("email")}
                  placeholder="Email"
                  className={
                    "mt-2 w-full basis-3/4 rounded-md border px-4 py-2 focus:outline-none " +
                    (formik.errors.email &&
                      formik.touched.email &&
                      "border-red-600 focus:border-red-600")
                  }
                />
                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {formik.touched.email && formik.errors.email}
                </p>
                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {error.email}
                </p>
                
              </div>

              <div className="relative mt-4 flex flex-row">
                <div className=" flex basis-1/4 items-center">
                  <label className=" text-center">Password</label>
                </div>
                <input
                  type="password"
                  name="password"
                  {...formik.getFieldProps("password")}
                  placeholder="Password"
                  className={
                    " mt-2 w-full basis-3/4 rounded-md border px-4 py-2 focus:outline-none " +
                    (formik.errors.password &&
                      formik.touched.password &&
                      "border-red-600 focus:border-red-600")
                  }
                />

                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {formik.touched.password && formik.errors.password}
                </p>
              </div>
              <div className="relative mt-4 flex flex-row">
                <div className=" basis-1/4">
                  <label className=" text-center">Confirm Password</label>
                </div>
                <input
                  type="password"
                  name="repassword"
                  {...formik.getFieldProps("repassword")}
                  placeholder="Password"
                  className={
                    "mt-2 w-full basis-3/4 rounded-md border px-4 py-2 focus:outline-none " +
                    (formik.errors.repassword &&
                      formik.touched.repassword &&
                      "border-red-600 focus:border-red-600")
                  }
                />
                <p className="absolute left-20 -top-3 text-xs text-rose-500 sm:-top-4 sm:left-32 sm:text-sm">
                  {formik.touched.repassword && formik.errors.repassword}
                </p>
              </div>
              <div className="flex">
                <button
                  onClick={formik.handleSubmit}
                  className="mt-4 w-full rounded-lg bg-orange-400 px-6 py-2 text-white hover:bg-orange-600"
                >
                  Create Account
                </button>
              </div>
              <div className="text-grey-dark mt-6">
                Already have an account?
                <button
                  className="text-orange-600 hover:underline"
                  onClick={() => setLogin(true)}
                >
                  Log in
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </>
  );
}
